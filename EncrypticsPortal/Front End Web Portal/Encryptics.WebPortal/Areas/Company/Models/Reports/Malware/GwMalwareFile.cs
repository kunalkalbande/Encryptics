using System.Threading;
using AutoMapper;
using Encryptics.WebPortal.Helpers;
using Encryptics.WebPortal.IdentityModel;
using Encryptics.WebPortal.PortalService;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;

namespace Encryptics.WebPortal.Areas.Company.Models.Reports.Malware
{
    public class GwMalwareFile
    {
        //public long FileId { get; set; }

        [Display(Name = "File Name")]
        public string FileName { get; set; }

        [Display(Name = "File Type")]
        public string FileType { get; set; }

        //[Display(Name = "Cleaned")]
        //public bool IsClean { get; set; }

        [Display(Name = "Violation Reporter")]
        public string UserName { get; set; }

        [Display(Name = "Author Email")]
        public string AuthorEmail { get; set; }

        [Display(Name = "Date Created")]
        [DisplayFormat(DataFormatString = "{0:d}")]
        public DateTime CreatedDate { get; set; }

        [Display(Name = "Delivery")]
        public string IsOutbound { get; set; }
    }

    public sealed class GwMalwareFileReportDefinition : GWReportDefinition
    {
        public GwMalwareFileReportDefinition()
        {
            Id = GetHashCode();
            Name = "Malware Files";
            HasTopCountParameter = false;
            DefaultSortColumn = "FileName";
            ReportType = "MalwareFiles";
            ShowGraphOnly = false;
            IsGraphAvailable = false;
        }

        public override void FillData(TokenAuth token, ReportParametersModel reportParameters, PortalServiceSoap portalService, ReportParams requestParameters, bool generateChartData)
        {
            var reportRequest = new GetMalwareFilesRequest(token, reportParameters.EntityId, null, requestParameters);
            var filesReport = portalService.GetMalwareFiles(reportRequest);
            var fileTypes = Mapper.Map<MalwareFileItem[], IEnumerable<GwMalwareFile>>
                (filesReport.GetMalwareFilesResult.Files).ToArray();
            var encrpticsUser = Thread.CurrentPrincipal as EncrypticsPrincipal;

            if (encrpticsUser != null)
            {
                foreach (var fileType in fileTypes)
                {
                    fileType.CreatedDate = fileType.CreatedDate.FromUTC(encrpticsUser.UTCOffset, encrpticsUser.UsesDST);
                }
            }

            reportParameters.ReportData = fileTypes.ToDataTable(reportParameters.DefaultSortColumn);
            reportParameters.TotalRecords = filesReport.GetMalwareFilesResult.TotalFiles;

            if (!generateChartData || !IsGraphAvailable) return;

            requestParameters.Page = 1;
            requestParameters.RecordsPerPage = int.MaxValue;

            filesReport = portalService.GetMalwareFiles(reportRequest);
            var chartDataTable = Mapper.Map<MalwareFileItem[], IEnumerable<GwMalwareFile>>
                (filesReport.GetMalwareFilesResult.Files).ToArray().ToDataTable(reportParameters.DefaultSortColumn);

            RemoveColumns(chartDataTable);

            GenerateJsonChartData(chartDataTable, reportParameters);
        }
    }
}
