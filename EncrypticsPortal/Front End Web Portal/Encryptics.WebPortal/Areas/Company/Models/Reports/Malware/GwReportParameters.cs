using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web.Mvc;
using AutoMapper;
#if _DEVELOPMENT
using WebPortal.net.encryptics.dlicensing;

#endif

namespace WebPortal.Models.Reports
{
    public class GwReportParameters : ReportParameters
    {
        public enum ReportTypes
        {
            MalwareRiskOverview = 1,
            MalwareFileTypesOveriview = 2,
            MalwareFileTypeRiskProfile = 3,
            MalwareFiles = 4
        }

        private static readonly IEnumerable<ReportDefinition> _reportDefinitions;

        public GwReportParameters()
        {
            _reports = _reportDefinitions;
        }

        static GwReportParameters()
        {
            _reportDefinitions = new List<ReportDefinition>
                {
                    new GwReportDefinition
                        {
                            Id = (int) ReportTypes.MalwareRiskOverview,
                            Name = "Malware Risk Overview",
                            HasTopCountParameter = false,
                            DefaultSortColumn = "RiskName",
                            ReportType = ReportTypes.MalwareRiskOverview.ToString(),
                            ShowGraphOnly = true,
                            FillData = (model, proxy, reportParams) =>
                                {
                                    var overviewReport = proxy.GetMalwareRiskOverview(model.EntityId, null, reportParams);
                                    var risks =
                                        Mapper.Map<MalwareRiskOverviewItem[], IEnumerable<GwMalwareRisk>>(
                                            overviewReport.Risks).ToArray();
                                    model.ReportData = ConvertToDataTable(risks, model.DefaultSortColumn);
                                    model.TotalRecords = overviewReport.TotalViolations;
                                }
                        },
                    new GwReportDefinition
                        {
                            Id = (int) ReportTypes.MalwareFileTypesOveriview,
                            Name = "Malware File Types Overview",
                            HasTopCountParameter = false,
                            DefaultSortColumn = "FileType",
                            ReportType = ReportTypes.MalwareFileTypesOveriview.ToString(),
                            ShowGraphOnly = true,
                            FillData = (model, proxy, reportParams) =>
                                {
                                    var overviewReport = proxy.GetMalwareFileTypesOverview(model.EntityId, null,
                                                                                           reportParams);
                                    var fileTypes =
                                        Mapper.Map<MalwareFileTypeOverviewItem[], IEnumerable<GwMalwareFileType>>(
                                            overviewReport.FileTypes).ToArray();
                                    model.ReportData = ConvertToDataTable(fileTypes, model.DefaultSortColumn);
                                    model.TotalRecords = overviewReport.TotalFiles;
                                }
                        },
                    new GwReportDefinition
                        {
                            Id = (int) ReportTypes.MalwareFileTypeRiskProfile,
                            Name = "Malware File Types Risk Profile",
                            HasTopCountParameter = false,
                            DefaultSortColumn = "Risk",
                            ReportType = ReportTypes.MalwareFileTypeRiskProfile.ToString(),
                            ShowFileTypesDropDown = true,
                            ShowGraphOnly = true,
                            FillData = (model, proxy, reportParams) =>
                                {
                                    var overviewReport =
                                        proxy.GetMalwareFileTypeRiskProfile(model.EntityId, null,
                                                                            ((GwReportParameters) model)
                                                                                .SelectedFileType, reportParams);
                                    var fileTypes =
                                        Mapper.Map<MalwareFileTypeRiskProfileItem[], IEnumerable<GwMalwareFileTypeRisk>>
                                            (overviewReport.Risks).ToArray();
                                    model.ReportData = ConvertToDataTable(fileTypes, model.DefaultSortColumn);
                                    model.TotalRecords = overviewReport.TotalViolations;
                                }
                        },
                    new GwReportDefinition
                        {
                            Id = (int) ReportTypes.MalwareFiles,
                            Name = "Malware Files",
                            HasTopCountParameter = false,
                            DefaultSortColumn = "FileName",
                            ReportType = ReportTypes.MalwareFiles.ToString(),
                            ShowGraphOnly = false,
                            FillData = (model, proxy, reportParams) =>
                                {
                                    var filesReport = proxy.GetMalwareFiles(model.EntityId, null, reportParams);
                                    var fileTypes = Mapper.Map<MalwareFileItem[], IEnumerable<GwMalwareFile>>
                                        (filesReport.Files).ToArray();
                                    model.ReportData = ConvertToDataTable(fileTypes, model.DefaultSortColumn);
                                    model.TotalRecords = filesReport.TotalFiles;
                                }
                        }
                };
        }

        [Display(Name = "Selected File Type")]
        public string SelectedFileType { get; set; }

        public bool ShowFileTypesDropDown
        {
            get { return SelectedReport != null && ((GwReportDefinition) SelectedReport).ShowFileTypesDropDown; }
        }

        public IEnumerable<SelectListItem> FileTypes { get; set; }

        public class GwReportDefinition : ReportDefinition
        {
            public bool ShowFileTypesDropDown { get; set; }
        }
    }
}