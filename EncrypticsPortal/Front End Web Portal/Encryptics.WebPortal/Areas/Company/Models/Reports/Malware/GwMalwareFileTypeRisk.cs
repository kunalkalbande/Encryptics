using AutoMapper;
using Encryptics.WebPortal.Helpers;
using Encryptics.WebPortal.PortalService;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using GlobalResources = Encryptics.WebPortal.Properties.Resources;

namespace Encryptics.WebPortal.Areas.Company.Models.Reports.Malware
{
    public class GwMalwareFileTypeRisk
    {
        [Display(ResourceType = typeof (GlobalResources), Name = "DisplayRisk")]
        public string Risk { get; set; }

        [Display(ResourceType = typeof (GlobalResources), Name = "DisplayTotalViolations")]
        public long TotalViolations { get; set; }

        //[Display(Name = "Risk Violation Percentage")]
        //public double RiskViolationPercentage { get; set; }
    }

    public sealed class GWMalwareFileTypeRisk : GWReportDefinition
    {
        public GWMalwareFileTypeRisk()
        {
            Id = GetHashCode();
            Name = "Malware File Types Risk Profile";
            HasTopCountParameter = false;
            DefaultSortColumn = GlobalResources.DisplayRisk;
            ReportType = "MalwareFileTypeRiskProfile";
            ShowFileTypes = true;
            ShowGraphOnly = true;
        }

        public override void FillData(TokenAuth token, ReportParametersModel reportParameters, PortalServiceSoap portalService, ReportParams requestParameters, bool generateChartData)
        {
            var reportRequest = new GetMalwareFileTypeRiskProfileRequest(token, reportParameters.EntityId, null, reportParameters.SelectedFileType, requestParameters);
            var overviewReport = portalService.GetMalwareFileTypeRiskProfile(reportRequest);
            var fileTypes = Mapper.Map<MalwareFileTypeRiskProfileItem[], IEnumerable<GwMalwareFileTypeRisk>>
                    (overviewReport.GetMalwareFileTypeRiskProfileResult.Risks).ToArray();
            reportParameters.ReportData = fileTypes.ToDataTable(reportParameters.DefaultSortColumn);
            reportParameters.TotalRecords = overviewReport.GetMalwareFileTypeRiskProfileResult.TotalViolations;

            if (!generateChartData) return;

            requestParameters.Page = 1;
            requestParameters.RecordsPerPage = int.MaxValue;

            overviewReport = portalService.GetMalwareFileTypeRiskProfile(reportRequest);
            var chartDataTable = Mapper.Map<MalwareFileTypeRiskProfileItem[], IEnumerable<GwMalwareFileTypeRisk>>
                    (overviewReport.GetMalwareFileTypeRiskProfileResult.Risks).ToArray().ToDataTable(reportParameters.DefaultSortColumn);

            GenerateJsonChartData(chartDataTable, reportParameters);
        }
    }
}